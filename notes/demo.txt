Compiler vs. Language Converter / Translator

source code--(lexical analysis)-> tokens --(parsing)--> AST --(semantic analysis)

Compiler
- lexical analysis
- preprocessing
- parsing
- semantic analysis
- code generation
- code optimization
	
AST  = tree representation of the abstract syntactic structure of source code written in a programming langauge

__Terminology__
AST = abstract syntax tre
S-expressions

Lisp = list processing:
- simple syntax
- representation of programs as data objects
- precedures represented and manipulated as Lisp data
- atom = fundamental unit of lisp
    numbers
    non-numeric: any name made of letters, number
    alphanumeric: may contain special chars * and +
    Nil () is an atom


Compiler -> transforms source written in one language to a target code in another language;

__Challenges__
    - parsing (recursion)
    - programming paradigms
    - defining dictionary at top and adding at the bottom
	- designing programs (small scale/ large scale)
	- appreciate the beauty of recursion: breaking a large problem into small known, solvable problems/ base case


