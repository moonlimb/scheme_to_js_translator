(define (name args*) (if (> a b) (...

(if (> x 0) (- x) x)

(define (abs x)
		(if (> x 0)
			(- x)
		x))

(define (factorial n)
	(if (= n 1)
		1
		(* n (factorial (- n 1)))))

(define (fib n)
	(cond ((= n 0) 0)
		  ((= n 1) 1)
		  (else (+ (fib (- n 1))
				   (fib (- n 2)))))) 


(define (expmod base exp m)
	(cond ((= exp 0) 1)
		  ((even? exp)
		   (remainder (square (expmod base (/ exp 2) m))
				       m))
		  (else 
		   (remainder (* base (expmod base (- exp 1) m))
						m))))

