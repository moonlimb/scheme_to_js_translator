from sys import argv
from js_ast import JsAST, Stmt, ReturnStmt, PrintStmt, IfStmt, ElseIfStmt, ElseStmt, Expr, ValueExpr, VarExpr, ArithExpr, Function

op = ['+','-','<','>','>=','<=','eq?', 'equal?']
logic = ['and', 'or', 'not'] # are there more in Scheme?

# what is the difference b/w op.is_ and op.eq?
	# eq? : op.is_
	# equal?: op.eq

# keywords: cond, define, abs

#(if <predicate> <consequent> <alternative>)
# <p> is a predicate
# <e> consequent expr

"""
<note>		'() empty list --> don't split these

boolean literal: #t, #f
integer literal: 3/ -3
string literal: "hello()"
"""

# use decorator
# use regex? 
# boolean variables to keep in track: is_string is_list	
# redefine a split function 		

special_form = {}

# converts any function in Scheme to equivalent string expr in JS

# (else <Stmt>) --> else { return <Stmt>; } 
# (if (<pred>) (<do_stmt>) alt_stmt)) 
		# --> if (<pred>){return <do_stmt>;} 
		#	  else { return alt_stmt ;}
		#return atom(tokens[pos]), pos+1

# send predicate to read_from 
# send expr to read_from
def construct_cond(tokens):
	pass

# (if <pred> <consq> <alt>)
def construct_else(stmt):
	if isinstance(stmt, list):
		return ElseStmt(write_js_from(stmt))
	else:
		try: return ValueExpr(float(token))
		except ValueError: # Variable is a Symbol 
			return VariableExpr(str(token))	

def negate_var(op, r_op):
	assert op == '-'
	return str(op) + str(r_op)
	
def construct_math(op, l_op, r_op):
	if not l_op:
		return VarExpr(negate_var(op, r_op)) 
	return ArithExpr(op, l_op, r_op)

# y if x else z
# (if x y z)
# predicate is any expr that evaluates top #f or #t

# (if (<pred>) (<body>) else_stmt))
def construct_if(pred_ls, body_ls, else_ls):
	# predicate could also be a nested list
	# in such case predicate is write_js_from(ls.pop())
	predicate = construct_math(pred_ls)
	body = write_js_from(body_ls)
	else_stmt = construct_else(else_ls)
	return IfStmt(predicate, body, [else_stmt])

def write_fn(nested_ls):
	fn_attrib = nested_ls.pop()
	name = fn_attrib[0]	
	params = fn_attrib[1:]
	stmt = write_js_from(nested_ls)
	# Function (name, args, stmt)
		
	# call get_expr function	
	# name, args (list), stmt
	# (define (<name> <params>)
		# <stmt>	

# special forms are keywords defined in Scheme
"""
if --> token in the nested_ls is a special form
elseif --> token in the nested_ls is a list
else --> token in the nested_ls is a VarExpr or ValueExpr
"""

def write_js_from(nested_ls, js_code):
	if nested_ls:
		return ""
	ls = nested_ls.pop()

	if special_form.get(ls): 
		js_code.append(special_form[ls](nested_ls))
	elif isinstance(ls, list):
		js_code.append(write_js_from(ls, js_code))
	else:
		js_code.append(ls)
	return nested_ls, js_code



# define --> function{}
		# name, args, stmts
		# name = abs
		# args x
		# stmts
		# if ( x < 0):
		# 	return -x
		# else:
		# 	return x
	# abs --> ValueExpr
	#  x--> VarExpr
	# if --> IfStmt / ElseStmt
	# CondStmts

def write_js(nested_lists):
	nested_lists.reverse()
	js_code=[]
	return JsAST(write_js_from(nested_lists, js_code))

# atom integer / letters/ combination of both and special char / ()
# modify atom so that atom becomes VarExpr, ValueExpr, String
def atom(token):
	# Norvig Style: "Numbers become numbers. Every other token is a symbol." 
	Symbol = str
	try:	return float(token)
	except ValueError:
		return Symbol(token)	#token is a Symbol

# return tokens with ( replaced by [ and ) by ]		
# base case: reached ) --> close the list and return to outer list
def read_from(tokens):
	if len(tokens) == 0: 
		raise SyntaxError('unexpected EOF while reading') # EOF = end of file
	token = tokens.pop() 
	if '(' == token: 
		L = [] 
		while tokens[-1] != ')': 
			L.append(read_from(tokens)) 
		tokens.pop()   # pop off ')' 
		return L 
	elif ')' == token: 
		raise SyntaxError('unexpected ) while reading') 
	else: 
		return atom(token) 

# create a nested list structure from a list of tokens
def read(tokens):
	return read_from(tokens)

def tokenize(s):
	# convert a string into a list of tokens
	return s.replace('(', ' ( ').replace(')', ' ) ').split()

def parse(s):
	tokens = tokenize(s)
	tokens.reverse()
	# reverse tokens to pop from the end 
	return read(tokens)
	
# reverse a list O(n)
# pop()	O(1) vs. pop(n) O(n)

# dictionary that maps from special_forms in Scheme to functions that will construct JS equivalents
special_form = {'define': write_fn, 'cond': construct_cond, 'else': construct_else, 'if': construct_if}

def read_file(file):
	f = open(file)
	f_str = f.read()
	f.close()
	return f_str

def main():
	script, file_name = argv
	f = read_file(file_name)
	nested_lists = parse(f)  # nested_lists is Scheme AST
	print write_js(nested_lists)

if __name__ == '__main__':
	main()	
