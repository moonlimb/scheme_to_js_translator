;; returns a random number between 1 and n

(random n) --> returns a random number b/w 0 and n
(+ 1 (random n)) --> returns a random number b/w 1 and n
(+ b (random n)) --> Math.floor(Math.random() * n) + b

;; compares guess with num
(define (compare-nums guess num)
	(if (> guess num) 
		("too high")
		"too low"))

;; returns a random number between 1 and n
(define (generate-rand-num n)
	(+ 1 (random n)))

;; get user input
(define (get-user-input)
	(88))

(define (get-new-guess n)
	()
)

;; guess > num
;; num > guess

(define (make-new-guess low-bound high-bound prev-guess)
	(if ((eq? prev-guess 'too high')
		(let high-bound (- prev-guess 1))		
		(let low-bound (+ prev-guess 1))))

(define (make-guess guess num)
	(cond (= guess num)
			()
			())

;; plays number guessing game with a random number generated b/w 1-n
(define (play-guess-game n)) 
	(let guess (get-user-input)
	(let num (generate-rand-num n) 
		(j
    while (human_input != perfect): 
        elif human_input == too_high: 
            high_bound = CS_guess - 1 
            print low_bound, high_bound 
        else: #human_input == too_low:  
            low_bound= CS_guess+1 
            print low_bound, high_bound  
        CS_guess = (low_bound + high_bound)/2 
        count+=1 
        print count 
        print "This is my new guess: %d." %CS_guess
 
(define (get-user-guess count)
	()

